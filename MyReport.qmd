---
title: "Automated Reports InDiKo"
author: "Marc Sparhuber, Sonja Hahn"
subtitle: "Function Overview"
bibliography: references.bib
format:
  html:
      toc: true
      code-fold:  true
      embed-resources: true
editor_options: 
  chunk_output_type: console
---

## **Introduction**

> This file is the result of efforts to automatise the creation of recurring evaluations at a higher education institution. The following functions have been used to provide feedback for single workshops and lectures containing a single measurement time point, but also pre- and post-tests. Feel free to use the code for your demands! We are open for feedback on the code and work on a package including these functions is in progress.

> To provide an example of the function's capabilities, we use some random data and item labels from the technological knowledge scale which we adapted to German [@doi:10.1080/15391523.2009.10782544].

## **Necessary Libraries**

```{r libraries}
#| message: false  
#| results: hide

library(knitr)
library(tidyverse)
library(psych)
library(gluedown)
library(patchwork)
library(stringi)
library(grid)
library(haven)

```

## **Example data**

```{r import data}
#| echo: true
#| warning: false

dsw <- readRDS("Quartodata.rds")
dsw

```

## **Functions**

### Open ended answers

> To show the capabilities of the open answers function we add a few fictional strings to our data, similary to how they may look when extracted from an open answers field in a survey. These include common writing patterns we have encountered, such as starting a new sub-section of a comment with a hyphen or a line break. The open answers function is made to display such comments closely to how they were written by the respondents. 

```{r prepare data open answers}
#| echo: true
#| warning: false
#| eval: true

OA_df <- tribble(
  ~Feedback,
  "A normal comment",
  "- A comment that starts with a hyphen",
  "- A comment that is split by a line break ... \n ... and continues here",
  "- A list of comments that are split by hyphens: \n -interesting! \n - instructive :) \n -really made me think!")

```

```{r open answers function}
#| echo: true
#| eval: true
#| warning: false

Open_Answers <- function(ds_value) {
Answers_split <- str_split(ds_value,"\n", simplify = TRUE)
Answers_split <- t(Answers_split)
Answers_split <- stringr::str_remove(Answers_split, "-")
stringi::stri_remove_empty_na(Answers_split) %>% md_bullet()
}
```

> finally, the open answers function outputs a bullet list in a markdown format.

```{r run open answers}
#| echo: true
#| results: asis

Open_Answers(OA_df$Feedback)

```

### Pre-Post Plot

> This function takes the responses of all participants on a complete scale in a pre- and post-test and outputs an overview of the development over time, both for the individual items of the scale (in blue), but also the total mean value of the scale (in red). Mean values and standard deviations are given at the two points in time, as well as the number of matched participants.

```{r Funktion Pre Post Plot}
#| echo: true

ppp <- function(vari, t, ID, title, s_min, s_max){
ds_p <- data.frame(ID,t,vari)

# Calculate descriptive statistics
desc <- ds_p %>% group_by(t) %>% summarise(., M = mean(vari, na.rm = TRUE), SD = sd(vari, na.rm = TRUE), N = n()) %>% round(.,2)

# generate line plot
ggplot(data = NULL, aes(x = t, y = M))+
  geom_line(data = desc, color = "red") +
  geom_point(data = desc, color = "red") +
  ylim(s_min,s_max)+
  scale_x_continuous(limits=c(0, 1), breaks = 0:1, labels = c("Pre","Post")) +
  xlab("Point in time") + ylab("Mean values") +
  theme_minimal()+

  geom_text(aes(x = 0.1, y = 1.5),
    label = paste0("M = ", desc[1,2], "\n", "SD = ",desc[1,3]), size = 3, nudge_x = 0.00, colour = "black")+

  geom_text(aes(x = 0.9, y = 1.5),
    label = paste0("M = ", desc[2,2], "\n", "SD = ",desc[2,3]), size = 3, nudge_x = 0.00, colour = "black")+

  geom_text(aes(x = 0.5, y = 1.5), 
    label = paste0("n = ", desc[1,4], "\n","(matched)"), size = 3, nudge_x = 0.00, colour = "black")+

  ggtitle(title) +

  geom_line(data = ds_p, aes(x = t, y = vari, group = ID), color = "blue")+
  geom_point(data = ds_p, aes(x = t, y = vari, group = ID), color = "blue")
}
```

```{r Legenden}
#| echo: true
#| results: hide
#| output: false

#create legends for pre-post plot

legende1_5 <- grid.text(
" 5 = totally agree \n
4 = rather agree \n
3 = neither nor \n
2 = rather disagree \n
1 = totally disagree", 
x = 0.2, y = 0.5, gp = gpar(fontsize = 8.5), just = "left")

legende1_4 <- grid.text(
" 4 = can teach others this \n
3 = can do this myself \n
2 = could find out how to do this \n
1 = can't do this",
x = 0.2, y = 0.5, gp = gpar(fontsize = 8.5), just = "left")

```

```{r Skalenplots, fig.width = 8, fig.height = 5, fig.align='center'}
#| fig-width: 8
#| fig-height: 5
#| fig-align: center
#| echo: true

ppp(dsw$TK_mean, dsw$t, dsw$PersonID.m, "Technological Knowledge", 1,5) + legende1_5

```

### Single Plots

> These functions generate bar charts for an item at a single measurement point. Additionally, the mean and standard deviation are calculated for each measurement point and plotted. The red line indicates the mean value of the item, which also shows the maximum possible value of a response option and can thus be used for visual comparison. N, SD and M are indicated in the plot. For the vertical bar chart, the item name is taken from the attribute() of the item and displayed on the left. For a similar, more complex presentation of data see [@Vetterlein_Sengewald_2015], but there are also cautionary notes.

```{r Einzelgrafik_Funktion}
#| echo: true

single_graph_vert <- function(Item, t, scale_length){
  
# 4 answer categories, else prepare function for 5 answer categories
if (scale_length == 4) {
labels_levels <- c("can't do this", " could find out how to do this", "can do this myself", "can teach others this")
one_X_list <- c(1:4)
}else{
labels_levels <- c("totally disagree", " rather disagree", "neither nor", " rather agree", " totally agree")
one_X_list <- c(1:5)
}
#trycatch here
  
  
# prepare strings according to the t parameter
if (t == "pre") {
label_prepost <- "Pre"
}else{
label_prepost <- "Post"
}
#trycatch here

  
# prepare descriptives & the data frame for plotting
df_graph <- Item
mean_plotting <- mean(df_graph[df_graph>0], na.rm = TRUE)
mean_rounded <- paste(" M =", format(round(mean_plotting, 2), nsmall = 2))
SD_plotting <- sd(df_graph[df_graph>0], na.rm = TRUE)
SD_rounded <- paste(" SD =", format(round(SD_plotting, 2), nsmall = 2))
n <- sum(!is.na(df_graph[df_graph>0]))
n_rounded <- paste(" N =", format(n))
annotation_complete <- paste("SD =", format(round(SD_plotting, 2), nsmall = 2), " " , "N =", n)


df_graph <- factor(df_graph, levels = one_X_list, labels = labels_levels)
frequency <- 0.4*prop.table(table(df_graph))
h.data <- data.frame(Ort=one_X_list, constant = t, gross = frequency)

# plotting

ggplot(data = h.data, aes(Ort, constant, text = annotation_complete))+
geom_linerange(data = h.data, aes(x = Ort, ymin = 1-gross.Freq, ymax = 1+gross.Freq), colour='#0078A5', linewidth = 5) +
scale_x_discrete(name = NULL, limits=one_X_list, labels = one_X_list) +
scale_y_discrete(name = label_prepost) +
geom_linerange(data = h.data, aes(x = mean_plotting, ymin = 1-0.3, ymax = 1+0.3), colour= "red", linewidth = 1) +
theme_minimal()+
theme(legend.position="none", aspect.ratio = 1.5)+
guides(size= "none", labels = "none")+
theme(axis.ticks = element_blank(), 
      panel.grid.major.x = element_blank(),
      axis.ticks.y = element_blank(), 
      axis.title.y = element_blank(), 
      axis.text.x = element_blank())+

  geom_text(aes(x = mean_plotting, y = constant), label = SD_rounded, nudge_y = 0.385, nudge_x = -0.135, size = 2.5, colour = "black")+

  geom_text(aes(x = 0.5, y = 1), label = n_rounded, size = 2.5, colour = "black")+

  geom_text(aes(x = mean_plotting, y = constant), label = mean_rounded, nudge_y = 0.40, nudge_x = 0.02, size = 2.5, fontface = "plain", colour = "red") +
  
coord_flip()
}

```

```{r Funktion fuer Grafik_Nadine}
#| echo: true

single_graph_hori <- function(dv){
  
  df_graph <- dv

dv_label <- strsplit(attributes(df_graph)$comment, ": ")[[1]][2]

mean_plotting <- mean(df_graph[df_graph>0], na.rm = TRUE)
mean_rounded <- paste(" M =", format(round(mean_plotting, 2), nsmall = 2))

SD_plotting <- sd(df_graph[df_graph>0], na.rm = TRUE) 
SD_rounded <- paste(" SD =", format(round(SD_plotting, 2), nsmall = 2))

n <- sum(!is.na(df_graph[df_graph>0]))
n_rounded <- paste(" N =", format(n))

annotation_complete <- paste("SD =",  
format(round(SD_plotting, 2), nsmall = 2), "                " , "N =",  
n)

df_graph <- factor(df_graph, levels = c(1:5,-9), labels =
                c("totally disagree", " rather disagree", "neither nor", " rather agree", " totally agree", "not answered"))

frequency <- 0.4*prop.table(table(df_graph))

h.data <- data.frame(Ort=1:6, constant = dv_label, gross = frequency)

ggplot(data = h.data, aes(Ort, constant,text = annotation_complete))+
   geom_linerange(data = h.data, aes(x = Ort, ymin = 1-gross.Freq, ymax = 1+gross.Freq), colour=c(rep(c('#0078A5','#8CD000'),c(5,1))),
              linewidth = 5) +
   scale_x_discrete(name="") +
   scale_y_discrete(name="", labels = function(x) str_wrap(str_replace_all(x, "foo" , " "),
                                                 width = 30))+
  
   geom_linerange(data = h.data, aes(x = mean_plotting, ymin = 1-0.43, ymax = 1+0.43), colour= "red", linewidth = 1) +
             theme_minimal()+
             theme(legend.position="none")+
             guides(size= "none", labels = "none")+
             theme(axis.ticks = element_blank())+

   geom_text(aes(x = 4, y = 0.5),
             label = SD_rounded,
             size = 2,
             colour = "black")+

   geom_text(aes(x = 5, y= 0.5),
             label = n_rounded,
             size = 2,
             colour = "black")+

   geom_text(aes(x = mean_plotting, y = constant),
             label = mean_rounded,
             nudge_y = 0.5,
             size = 2,
             fontface = "plain",
             colour = "red")
}
```

> Two versions of this graph exist:
>
> - a vertical bar chart, which is also used in generating the pre-post single plot. It also displays whether the data is from pre or post.

```{r TK1_single graph, fig.width = 7, fig.height = 4, out.height = "77%", out.width= "77%", fig.align='center'}
#| fig-width: 7
#| fig-height: 4
#| fig-align: center
#| out-height: 77%
#| out-width: 77%
#| echo: true
#| warning: false

single_graph_vert(dsw$TK1, "pre", 5)
```

>
> - and a horizontal bar chart that has been used in older versions of the evaluation process and can currently not be used to generate pre-post single plots.

```{r Nadine_Graph, fig.width = 7, fig.height = 4, out.height = "77%", out.width= "77%", fig.align='center'}
#| fig-width: 7
#| fig-height: 4
#| fig-align: center
#| out-height: 77%
#| out-width: 77%
#| echo: true
#| warning: false

single_graph_hori(dsw$TK2)
```


### Pre-Post Single Plot

> To show the values of the individual items of the scales at both pre and post, two functions are used:
>
> - Mean and standard deviation are calculated for each measurement point and plotted as a bar chart, as can be seen in the two plots above. The red line signs the mean value of the item.
> - In a second step, the two graphs are combined with the package "patchwork" and labels based on the respective item's attributes() are added.

```{r Patching single graphs}
#| echo: true

patching_single_graphs <- function(Item, time_var, pre_val, post_val, scale_length){
# initiate empty lists
data_graph_pre_t0 <- vector(mode = "list", length = 0)
data_graph_pre_t1 <- vector(mode = "list", length = 0)

# 4 answer categories, else prepare function for 5 answer categories
if (scale_length == 4) {
data_graph_pre_t0$Four <- Item[time_var == pre_val]
data_graph_pre_t1$Four <- Item[time_var == post_val]
plot1 <- single_graph_vert(data_graph_pre_t0$Four, "pre", scale_length)
plot2 <- single_graph_vert(data_graph_pre_t1$Four, "post", scale_length)
}else{
data_graph_pre_t0$Five <- Item[time_var == pre_val]
data_graph_pre_t1$Five <- Item[time_var == post_val]
plot1 <- single_graph_vert(data_graph_pre_t0$Five, "pre", scale_length)
plot2 <- single_graph_vert(data_graph_pre_t1$Five, "post", scale_length)
}

# use the patchwork() package to edit plots & then combine them
patches = plot1 + plot2 + plot_layout(widths = c(1,1)) + plot_annotation(
title = attributes(Item)$comment, theme = theme(plot.title = element_text(size = 14)))
patches[[2]] = patches[[2]] + theme(axis.text.y = element_blank(),
axis.ticks.y = element_blank(),
axis.title.y = element_blank(),
axis.text.x = element_blank())
patches[[1]] = patches[[1]] + theme(axis.text.x = element_blank())
patches
}

```

```{r TK1, fig.width = 7, fig.height = 4, out.height = "77%", out.width= "77%", fig.align='center'}
#| fig-width: 7
#| fig-height: 4
#| fig-align: center
#| out-height: 77%
#| out-width: 77%
#| echo: true
#| warning: false

patching_single_graphs(dsw$TK1, dsw$t, 0, 1, 5)
```
